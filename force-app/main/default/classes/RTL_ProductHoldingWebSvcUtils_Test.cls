@isTest
public class RTL_ProductHoldingWebSvcUtils_Test {

    public static String getResponseSCS_get_cards_balances {
        get {
            return '{\n' +
            '"status":{\n' +
                '"status_code":0\n' +
            '},\n' +
            '"rm_id":0,\n' +
            '"credit_card":[\n' +
                '{\n' +
                    '"card_id":"526789XXXXXX3728",\n' +
                    '"account_id":"0000000000053045212043728",\n' +
                    '"product_id":"600",\n' +
                    '"card_points":{\n' +
                        '"point_earned":0.00,\n' +
                        '"point_used":0.00,\n' +
                        '"point_available":0.00,\n' +
                        '"point_remain":0.00,\n' +
                        '"expiry_points":0.00,\n' +
                        '"expiry_date":""\n' +
                    '},\n' +
                    '"card_status":{\n' +
                        '"stop_code":2,\n' +
                        '"stop_code_desc":"-",\n' +
                        '"account_status":0,\n' +
                        '"account_agree_status":9,\n' +
                        '"activated_date":"0000-00-00",\n' +
                        '"block_code":"",\n' +
                        '"previous_expiry_date":0,\n' +
                        '"application_type":"B"\n' +
                    '},\n' +
                    '"card_balances":{\n'+
                        '"current_balance":38141.99,\n'+
                        '"ledger_balance":54463.00,\n'+
                        '"available_cash_advance":61650.00,\n'+
                        '"available_credit_allowance":32450.00,\n'+
                        '"last_payment_amount":2090.00,\n'+
                        '"last_payment_date":"2020-01-31",\n'+
                        '"eptb_installment_available":130000.00,\n'+
                        '"epai_installment_available":0.00,\n'+
                        '"balance_credit_limit":{\n'+
                            '"total":150000.00,\n'+
                            '"available_to_transfer":50000.00,\n'+
                            '"current":241800\n'+
                        '},\n'+
                        '"balance_credit_line":{\n'+
                            '"total":186000,\n'+
                            '"available":196759,\n'+
                            '"current":241800\n'+
                        '}\n'+
                    '}\n' +
                '},\n' +
                '{\n' +
                    '"card_id":"565813XXXXXX6010",\n' +
                    '"account_id":"000000000001452001274528",\n' +
                    '"product_id":"MDC601",\n' +
                    '"card_points":{\n' +
                        '"point_earned":0.00,\n' +
                        '"point_used":0.00,\n' +
                        '"point_available":0.00,\n' +
                        '"point_remain":0.00,\n' +
                        '"expiry_points":0.00,\n' +
                        '"expiry_date":""\n' +
                    '},\n' +
                    '"card_status":{\n' +
                        '"stop_code":2,\n' +
                        '"stop_code_desc":"-",\n' +
                        '"account_status":0,\n' +
                        '"account_agree_status":9,\n' +
                        '"activated_date":"0000-00-00",\n' +
                        '"block_code":"",\n' +
                        '"previous_expiry_date":0,\n' +
                        '"application_type":"B"\n' +
                    '},\n' +
                    '"card_balances":{\n'+
                        '"current_balance":38141.99,\n'+
                        '"ledger_balance":54463.00,\n'+
                        '"available_cash_advance":485.00,\n'+
                        '"available_credit_allowance":2535.00,\n'+
                        '"last_payment_amount":2090.00,\n'+
                        '"last_payment_date":"2020-01-31",\n'+
                        '"eptb_installment_available":120.00,\n'+
                        '"epai_installment_available":0.00,\n'+
                        '"balance_credit_limit":{\n'+
                            '"total":150000.00,\n'+
                            '"available_to_transfer":30000.00,\n'+
                            '"current":241800\n'+
                        '},\n'+
                        '"balance_credit_line":{\n'+
                            '"total":186000,\n'+
                            '"available":22255660,\n'+
                            '"current":125000\n'+
                        '}\n'+
                    '}\n' +
                '},\n' +
                '{\n' +
                    '"card_id":"596313XXXXXX3999",\n' +
                    '"account_id":"0000000000053029652569874",\n' +
                    '"product_id":"600",\n' +
                    '"card_points":{\n' +
                        '"point_earned":0.00,\n' +
                        '"point_used":0.00,\n' +
                        '"point_available":0.00,\n' +
                        '"point_remain":0.00,\n' +
                        '"expiry_points":0.00,\n' +
                        '"expiry_date":""\n' +
                    '},\n' +
                    '"card_status":{\n' +
                        '"stop_code":2,\n' +
                        '"stop_code_desc":"-",\n' +
                        '"account_status":0,\n' +
                        '"account_agree_status":9,\n' +
                        '"activated_date":"0000-00-00",\n' +
                        '"block_code":"",\n' +
                        '"previous_expiry_date":0,\n' +
                        '"application_type":"B"\n' +
                    '},\n' +
                    '"card_balances":{\n'+
                        '"current_balance":6423.99,\n'+
                        '"ledger_balance":687323.00,\n'+
                        '"available_cash_advance":87562.00,\n'+
                        '"available_credit_allowance":86623.00,\n'+
                        '"last_payment_amount":8452.00,\n'+
                        '"last_payment_date":"2020-03-12",\n'+
                        '"eptb_installment_available":532220.00,\n'+
                        '"epai_installment_available":0.00,\n'+
                        '"balance_credit_limit":{\n'+
                            '"total":350000.00,\n'+
                            '"available_to_transfer":120000.00,\n'+
                            '"current":23568\n'+
                        '},\n'+
                        '"balance_credit_line":{\n'+
                            '"total":1224458,\n'+
                            '"available":354568,\n'+
                            '"current":1122240\n'+
                        '}\n'+
                    '}\n' +
                '},\n' +
                '{\n' +
                    '"card_id":"698sd3XXXXXX3999",\n' +
                    '"account_id":"xxxxxxxx",\n' +
                    '"product_id":"MDC601",\n' +
                    '"card_points":{\n' +
                        '"point_earned":0.00,\n' +
                        '"point_used":0.00,\n' +
                        '"point_available":0.00,\n' +
                        '"point_remain":0.00,\n' +
                        '"expiry_points":0.00,\n' +
                        '"expiry_date":""\n' +
                    '},\n' +
                    '"card_status":{\n' +
                        '"stop_code":2,\n' +
                        '"stop_code_desc":"-",\n' +
                        '"account_status":0,\n' +
                        '"account_agree_status":9,\n' +
                        '"activated_date":"0000-00-00",\n' +
                        '"block_code":"",\n' +
                        '"previous_expiry_date":0,\n' +
                        '"application_type":"B"\n' +
                    '},\n' +
                    '"card_balances":{\n'+
                        '"current_balance":6423.99,\n'+
                        '"ledger_balance":687323.00,\n'+
                        '"available_cash_advance":432188.00,\n'+
                        '"available_credit_allowance":86623.00,\n'+
                        '"last_payment_amount":8452.00,\n'+
                        '"last_payment_date":"2020-03-12",\n'+
                        '"eptb_installment_available":532220.00,\n'+
                        '"epai_installment_available":0.00,\n'+
                        '"balance_credit_limit":{\n'+
                            '"total":350000.00,\n'+
                            '"available_to_transfer":12222000.00,\n'+
                            '"current":23568\n'+
                        '},\n'+
                        '"balance_credit_line":{\n'+
                            '"total":1224458,\n'+
                            '"available":354568,\n'+
                            '"current":1122240\n'+
                        '}\n'+
                    '}\n' +
                '},\n' +
                '{\n' +
                    '"card_id":"",\n' +
                    '"account_id":"xxxxxxxx",\n' +
                    '"product_id":"MDC601",\n' +
                    '"card_points":{\n' +
                        '"point_earned":0.00,\n' +
                        '"point_used":0.00,\n' +
                        '"point_available":0.00,\n' +
                        '"point_remain":0.00,\n' +
                        '"expiry_points":0.00,\n' +
                        '"expiry_date":""\n' +
                    '},\n' +
                    '"card_status":{\n' +
                        '"stop_code":2,\n' +
                        '"stop_code_desc":"-",\n' +
                        '"account_status":0,\n' +
                        '"account_agree_status":9,\n' +
                        '"activated_date":"0000-00-00",\n' +
                        '"block_code":"",\n' +
                        '"previous_expiry_date":0,\n' +
                        '"application_type":"B"\n' +
                    '},\n' +
                    '"card_balances":{\n'+
                        '"current_balance":6423.99,\n'+
                        '"ledger_balance":687323.00,\n'+
                        '"available_cash_advance":432188.00,\n'+
                        '"available_credit_allowance":86623.00,\n'+
                        '"last_payment_amount":8452.00,\n'+
                        '"last_payment_date":"2020-03-12",\n'+
                        '"eptb_installment_available":532220.00,\n'+
                        '"epai_installment_available":0.00,\n'+
                        '"balance_credit_limit":{\n'+
                            '"total":350000.00,\n'+
                            '"available_to_transfer":12222000.00,\n'+
                            '"current":23568\n'+
                        '},\n'+
                        '"balance_credit_line":{\n'+
                            '"total":1224458,\n'+
                            '"available":354568,\n'+
                            '"current":1122240\n'+
                        '}\n'+
                    '}\n' +
                '},\n' +
                '{\n' +
                    '"card_id":"xxxxxxxx",\n' +
                    '"account_id":"",\n' +
                    '"product_id":"MDC602",\n' +
                    '"card_points":{\n' +
                        '"point_earned":0.00,\n' +
                        '"point_used":0.00,\n' +
                        '"point_available":0.00,\n' +
                        '"point_remain":0.00,\n' +
                        '"expiry_points":0.00,\n' +
                        '"expiry_date":""\n' +
                    '},\n' +
                    '"card_status":{\n' +
                        '"stop_code":2,\n' +
                        '"stop_code_desc":"-",\n' +
                        '"account_status":0,\n' +
                        '"account_agree_status":9,\n' +
                        '"activated_date":"0000-00-00",\n' +
                        '"block_code":"",\n' +
                        '"previous_expiry_date":0,\n' +
                        '"application_type":"B"\n' +
                    '},\n' +
                    '"card_balances":{\n'+
                        '"current_balance":6423.99,\n'+
                        '"ledger_balance":687323.00,\n'+
                        '"available_cash_advance":432188.00,\n'+
                        '"available_credit_allowance":86623.00,\n'+
                        '"last_payment_amount":8452.00,\n'+
                        '"last_payment_date":"2020-03-12",\n'+
                        '"eptb_installment_available":532220.00,\n'+
                        '"epai_installment_available":0.00,\n'+
                        '"balance_credit_limit":{\n'+
                            '"total":350000.00,\n'+
                            '"available_to_transfer":12222000.00,\n'+
                            '"current":23568\n'+
                        '},\n'+
                        '"balance_credit_line":{\n'+
                            '"total":1224458,\n'+
                            '"available":354568,\n'+
                            '"current":1122240\n'+
                        '}\n'+
                    '}\n' +
                '}\n' +
            '],\n' +
            '"total_records":6,\n' +
            '"max_records":6,\n' +
            '"more_records":"N",\n' +
            '"search_keys":""\n' +
            '}\n';
        }
    }

    public static String getResponseOSC01 {
        get {
            return '{"GetCustomerAccountResponse":{"DepositAccounts":{"DepositAccount":[{"Status":"SUCCESS","AccountNumber":"2471779484","FIIdent":"0011000102470000","ProductType":"com.fnis.xes.IM","ProductCode":"101","OpenedDate":"2013-12-13","AccountStatus":"Active | ปกติ (Active)","Outstanding":"0","AvgOutstanding":"0","ODLimit":"0","Ledger":"0","InterestEarned":"0","HasJoint":"PRIIND"},{"Status":"SUCCESS","AccountNumber":"00000542332499","FIIdent":"0011000100540200","ProductType":"com.fnis.xes.ST","ProductCode":"200","OpenedDate":"2013-12-31","AccountStatus":"Inactive | ปกติ (Active)","Outstanding":"0","AvgOutstanding":"0","ODLimit":"0","Ledger":"0","InterestEarned":"0","HasJoint":"PRIIND"},{"Status":"SUCCESS","AccountNumber":"02473011316001","FIIdent":"0011000102470300","ProductType":"com.fnis.xes.ST","ProductCode":"300","OpenedDate":"2014-03-18","AccountStatus":"Active | ปกติ (Active)","Outstanding":"0","AvgOutstanding":"0","ODLimit":"0","Ledger":"0","InterestEarned":"0","HasJoint":"PRIIND"},{"Status":"SUCCESS","AccountNumber":"02473011316002","FIIdent":"0011000102470300","ProductType":"com.fnis.xes.ST","ProductCode":"300","OpenedDate":"2014-02-05","AccountStatus":"Active | ปกติ (Active)","Outstanding":"0","AvgOutstanding":"0","ODLimit":"0","Ledger":"0","InterestEarned":"0","HasJoint":"PRIIND"},{"Status":"SUCCESS","AccountNumber":"00000017681123","FIIdent":"0011000100010200","ProductType":"com.fnis.xes.ST","ProductCode":"200","OpenedDate":"2013-12-31","AccountStatus":"Dormant | ติดต่อสาขา (Contact Branch)","Outstanding":"0","AvgOutstanding":"0","ODLimit":"0","Ledger":"0","InterestEarned":"0","HasJoint":"SECJNT"},{"Status":"SUCCESS","AccountNumber":"00000292490034","FIIdent":"0011000100290200","ProductType":"com.fnis.xes.ST","ProductCode":"200","OpenedDate":"2013-07-31","AccountStatus":"Dormant | ติดต่อสาขา (Contact Branch)","Outstanding":"0","AvgOutstanding":"0","ODLimit":"0","Ledger":"0","InterestEarned":"0","HasJoint":"SECJNT"},{"Status":"SUCCESS","AccountNumber":"00002332136809","FIIdent":"0011000102330200","ProductType":"com.fnis.xes.ST","ProductCode":"221","OpenedDate":"2013-12-31","AccountStatus":"Inactive | ปกติ (Active)","Outstanding":"0","AvgOutstanding":"0","ODLimit":"0","Ledger":"0","InterestEarned":"0","HasJoint":"SECJNT"}]},"CreditCardAccounts":{"CreditCardAccount":[{"Status":"SUCCESS","CardNumber":"496694006242032105","CreditCardType":"011","OpenedDate":"2008-11-24","AccountStatus":"BLCK C"}]},"LoanAccounts":{"LoanAccount":[{"Status":"SUCCESS","AccountNumber":"00015405889701","FIIdent":"0011000100010000","ProductType":"com.fnis.xes.AL","ProductCode":"S700","OpenedDate":"9999-12-31","AccountStatus":"Active","Outstanding":"0","Limit":"0","HasCoborrower":"PRIIND"},{"Status":"SUCCESS","AccountNumber":"00015414618701","FIIdent":"0011000100010000","ProductType":"com.fnis.xes.AL","ProductCode":"S700","OpenedDate":"9999-12-31","AccountStatus":"Active","Outstanding":"0","Limit":"0","HasCoborrower":"PRIIND"},{"Status":"SUCCESS","AccountNumber":"00015414626701","FIIdent":"0011000100010000","ProductType":"com.fnis.xes.AL","ProductCode":"S700","OpenedDate":"9999-12-31","AccountStatus":"Active","Outstanding":"0","Limit":"0","HasCoborrower":"PRIIND"},{"Status":"SUCCESS","AccountNumber":"00015414642701","FIIdent":"0011000100010000","ProductType":"com.fnis.xes.AL","ProductCode":"S700","OpenedDate":"9999-12-31","AccountStatus":"Active","Outstanding":"0","Limit":"0","HasCoborrower":"PRIIND"},{"Status":"SUCCESS","AccountNumber":"00016151011001","FIIdent":"0011000100010000","ProductType":"com.fnis.xes.AL","ProductCode":"ABHA","OpenedDate":"2020-01-24","AccountStatus":"Active","Outstanding":"0","Limit":"0","HasCoborrower":"PRIJNT"}]},"BancassuranceAccounts":{"BancassuranceAccount":[{"Status":"SUCCESS","SumInsure":"0","AFVP":"0"}]},"InvestmentAccounts":{"InvestmentAccount":[{"Status":"SUCCESS","UnitHoldNo":"PT000000000000000003","Units":"0","MarketValue":"0","UnrealizedGL":"0","AvgCost":"0","NoOfUnit":"0"},{"Status":"SUCCESS","UnitHoldNo":"PT000000000000000012","Units":"0","MarketValue":"0","UnrealizedGL":"0","AvgCost":"0","NoOfUnit":"0"},{"Status":"SUCCESS","UnitHoldNo":"PT000000000000010501","Units":"0","MarketValue":"0","UnrealizedGL":"0","AvgCost":"0","NoOfUnit":"0"},{"Status":"SUCCESS","UnitHoldNo":"PT000000000000103121","Units":"0","MarketValue":"0","UnrealizedGL":"0","AvgCost":"0","NoOfUnit":"0"},{"Status":"SUCCESS","UnitHoldNo":"0010013993","Units":"0","MarketValue":"0","UnrealizedGL":"0","AvgCost":"0","NoOfUnit":"0"},{"Status":"SUCCESS","UnitHoldNo":"0550003552","Units":"0","MarketValue":"0","UnrealizedGL":"0","AvgCost":"0","NoOfUnit":"0"},{"Status":"SUCCESS","UnitHoldNo":"110063000379","Units":"0","MarketValue":"0","UnrealizedGL":"0","AvgCost":"0","NoOfUnit":"0"},{"Status":"SUCCESS","UnitHoldNo":"110233000078","Units":"0","MarketValue":"0","UnrealizedGL":"0","AvgCost":"0","NoOfUnit":"0"},{"Status":"SUCCESS","UnitHoldNo":"111001000034","Units":"0","MarketValue":"0","UnrealizedGL":"0","AvgCost":"0","NoOfUnit":"0"},{"Status":"SUCCESS","UnitHoldNo":"111001010691","Units":"0","MarketValue":"0","UnrealizedGL":"0","AvgCost":"0","NoOfUnit":"0"},{"Status":"SUCCESS","UnitHoldNo":"111324000011","Units":"0","MarketValue":"0","UnrealizedGL":"0","AvgCost":"0","NoOfUnit":"0"}]}},"Status":{"StatusCode":200,"StatusDesc":"success"}}';
        }
    }

    public static String getResponseOSC02 {
        get {
            return '{ "GetDepositAccountResponse": { "AcctInqRs": { "Status": { "StatusCode": "0", "Severity": "Info", "StatusDesc": "Success", "AdditionalStatus": [ { "StatusCode": "0", "ServerStatusCode": "SD3000", "Severity": "Info", "StatusDesc": "Success" }, { "StatusCode": "-1000", "ServerStatusCode": "SD3000", "Severity": "Info", "StatusDesc": "OTHER ACTIVITY TODAY TSPCIMMI" } ] }, "RqUID": "61873ef9-c23c-4858-ad5b-4aa66a589078", "CustId": { "SPName": "IM", "CustPermId": "" }, "UpDt": "2013-12-13T00:00:00+07:00", "LastStmtDt": "2014-03-31", "AcctBal": [ { "BalType": "Avail", "CurAmt": { "Amt": "350250.00", "CurCode": "THB" } }, { "BalType": "AvgLedger", "CurAmt": { "Amt": "200250.00", "CurCode": "THB" } }, { "BalType": "Ledger", "CurAmt": { "Amt": "200250.00", "CurCode": "THB" } }, { "BalType": "Float", "CurAmt": { "Amt": "0.00", "CurCode": "THB" } }, { "BalType": "FloatDay1", "CurAmt": { "Amt": "0.00", "CurCode": "THB" } }, { "BalType": "FloatDay2", "CurAmt": { "Amt": "0.00", "CurCode": "THB" } }, { "BalType": "FloatDay3", "CurAmt": { "Amt": "0.00", "CurCode": "THB" } }, { "BalType": "ClosingLedger", "CurAmt": { "Amt": "350250.00", "CurCode": "THB" } } ], "ExtAcctBal": [ { "ExtBalType": "YTDInterest", "CurAmt": { "Amt": "0.00", "CurCode": "THB" }, "EffDt": "2020-01-06T15:18:04.400000+07:00" }, { "ExtBalType": "SavingsYTDInterest", "CurAmt": { "Amt": "0.00", "CurCode": "THB" }, "EffDt": "2020-01-06T15:18:04.400000+07:00" }, { "ExtBalType": "UnpaidAccruedInt", "CurAmt": { "Amt": "0.000000", "CurCode": "THB" }, "EffDt": "2020-01-06T15:18:04.400000+07:00" }, { "ExtBalType": "LastYrInt", "CurAmt": { "Amt": "0.00", "CurCode": "THB" }, "EffDt": "2020-01-06T15:18:04.400000+07:00" }, { "ExtBalType": "IODLastYrInt", "CurAmt": { "Amt": "0.00", "CurCode": "THB" }, "EffDt": "2020-01-06T15:18:04.400000+07:00" }, { "ExtBalType": "IODYTDInterest", "CurAmt": { "Amt": "0.00", "CurCode": "THB" }, "EffDt": "2020-01-06T15:18:04.400000+07:00" }, { "ExtBalType": "Hold", "CurAmt": { "Amt": "0.00", "CurCode": "THB" }, "EffDt": "2020-01-06T15:18:04.400000+07:00" }, { "ExtBalType": "LastStmtBal", "CurAmt": { "Amt": "200250.00", "CurCode": "THB" }, "EffDt": "2020-01-06T15:18:04.400000+07:00" } ], "BankAcctRec": { "DepAcctId": { "AcctId": "00110001024700002471779484", "AcctType": "DDA", "AcctCur": "THB", "BankInfo": { "BankId": "11", "RefInfo": { "RefType": "PrimaryOfficer", "RefId": "00247" }, "BranchId": "247", "BranchName": "" } }, "BankAcctInfo": { "CurCode": "THB", "ContactInfo": { "PhoneNum": { "PhoneType": "Business", "Phone": "022993718" } }, "CustAcctUse": "Retail", "IntRateInfo": { "Rate": "0.000000" }, "ProductId": "IM101" }, "BankAcctStatus": { "BankAcctStatusCode": "Active | ปกติ (Active)" }, "AcctBal": { "BalType": "OnlineCredits", "CurAmt": { "Amt": "0.00", "CurCode": "THB" } } }, "DepAcctRec": { "HoldCount": "0", "LastDepDt": "2013-12-13", "LastDepCurAmt": { "Amt": "200.00", "CurCode": "THB" }, "DepAcctInfo": { "AccountTitle": "นาง ทด สอบ", "OpenDt": "2013-01-17", "EndDt": "2014-04-30T12:00:00.000000-00:00", "TINInfo": { "TINType": "Invalid-NoTIN", "TaxId": "" }, "PostedDt": "2014-04-29", "RelCd": "None", "Language": "", "DepAcctStmtInfo": { "CurrentCycleChecksCnt": "0", "StmtCycleCd": "E", "StmtInst": "0", "CombinedStmtCd": "E00", "Frequency": { "Freq": "EndOfMonth" } }, "PersonInfo": { "NameAddrType": "", "FullName": "นาง ทด สอบ", "ContactInfo": { "PostAddr": { "Addr1": "222/2 ม.2", "Addr2": "ถ.พหลโยธิน", "Addr3": "แขวงจอมพล เขตจตุจักร", "City": "กรุงเทพมหานคร -", "PostalCode": "10900", "Country": "TH", "AddrType": "Mailing" } } }, "HoldIndCode": "0", "WithholdCd": "0", "WithholdReason": "0", "LastMonetaryDt": "2013-12-13", "AcctMiscData": { "AcctMiscType": "NameAddrTrailer", "MiscText": "Primary Name/Address trailer only exists" }, "LastCustActvDt": "2013-12-13", "AccrIODInt": "0.00", "ShrtName": "TOD SOB", "ODLimitAmt": "150000.00", "CurAnnlRate2": "0.000000", "AmountWaived": "0", "WaiveRemaining": "0", "WaiveUsed": "0", "SMSAlertFlag": "N", "OpeningMethod": "0" }, "IndicatorsInfo": "", "AcctBal": { "BalType": "TotalFloat", "CurAmt": { "Amt": "0.00", "CurCode": "THB" } } }, "SavingsTrailerInd": "0", "OverDraftItem": [ { "ODMonth": "1", "Count": "0" }, { "ODMonth": "2", "Count": "0" }, { "ODMonth": "3", "Count": "0" }, { "ODMonth": "4", "Count": "0" }, { "ODMonth": "5", "Count": "0" }, { "ODMonth": "6", "Count": "0" }, { "ODMonth": "7", "Count": "0" }, { "ODMonth": "8", "Count": "0" }, { "ODMonth": "9", "Count": "0" }, { "ODMonth": "10", "Count": "0" }, { "ODMonth": "11", "Count": "0" }, { "ODMonth": "12", "Count": "0" } ], "NSFItem": [ { "NSFMonth": "1", "Count": "0" }, { "NSFMonth": "2", "Count": "0" }, { "NSFMonth": "3", "Count": "0" }, { "NSFMonth": "4", "Count": "0" }, { "NSFMonth": "5", "Count": "0" }, { "NSFMonth": "6", "Count": "0" }, { "NSFMonth": "7", "Count": "0" }, { "NSFMonth": "8", "Count": "0" }, { "NSFMonth": "9", "Count": "0" }, { "NSFMonth": "10", "Count": "0" }, { "NSFMonth": "11", "Count": "0" }, { "NSFMonth": "12", "Count": "0" } ] }, "Datawarehouse": { "AvgOutBal": 0 }, "Status": { "StatusCode": "200", "StatusDesc": "success" } }, "GetDepositAccountDetailResponse": { "Result": { "Status": "SUCCESS", "Message": "", "DepositAccount": { "Status": "SUCCESS", "Message": "", "AccountNumber": "2471779484", "AccountName": "นาง ทด สอบ", "ProductCode": "IM101", "OpenedDate": "2013-01-17+07:00", "AccountStatus": "Active | ปกติ (Active)", "Outstanding": "350250.00", "ODLimit": "150000.00", "Ledger": "200250.00", "InterestRate": "0.000000", "HasJoint": "", "SMSAlertService": "No" }, "JointAccount": { "Status": "SUCCESS", "Message": "" }, "LastMonthTransactionSummary": { "Status": "SUCCESS", "Message": "" }, "Beneficiary": { "Status": "SUCCESS", "Message": "" } } }, "Status": { "StatusCode": "200", "StatusDesc": "success" } }';
        }
    }

    public static String getResponseOSC02InnerEmpty {
        get {
            return '{ "GetDepositAccountResponse": {},"Status": { "StatusCode": "444", "StatusDesc": "testError" } }';
        }
    }

    public static String getResponseOSC04 {
        get {
            return '{ "GetLoanAccountResponse": { "AcctInqRs": { "Status": { "StatusCode": "0", "Severity": "Info", "StatusDesc": "Success" }, "RqUID": "f5d6d581-e4d4-4f36-82f5-930f91342707", "LoanAcctId": { "AcctId": "001100010001000000015405889701", "AcctType": "LOC", "BankInfo": { "BankId": "11" } }, "LnCustAcctId": { "SPName": "", "CustPermId": "001100010001000000000006878141" }, "UpDt": "2020-01-06T15:18:28.858+07:00", "LastTrnDt": "", "AcctBal": [ { "BalType": "Principal", "CurAmt": { "Amt": "1126125.00", "CurCode": "THB" } }, { "BalType": "Outstanding", "CurAmt": { "Amt": "1126125.00", "CurCode": "THB" } }, { "BalType": "Used", "CurAmt": { "Amt": "1126125.00" } }, { "BalType": "LnAvail", "CurAmt": { "Amt": "0.00" } }, { "BalType": "PayoffAmt", "CurAmt": { "Amt": "1126125.00", "CurCode": "THB" } }, { "BalType": "Current", "CurAmt": { "Amt": "1126125.00", "CurCode": "THB" } }, { "BalType": "CurIntRecBal", "CurAmt": { "Amt": "0.00", "CurCode": "THB" } }, { "BalType": "OrigCommitmentBal", "CurAmt": { "Amt": "1126125.00", "CurCode": "THB" } }, { "BalType": "CurCommitmentBal", "CurAmt": { "Amt": "1126125.00", "CurCode": "THB" } } ], "ExtAcctBal": [ { "ExtBalType": "YTDInterest", "CurAmt": { "Amt": "0.00", "CurCode": "THB" }, "EffDt": "2020-01-06T15:18:28.849000+07:00" }, { "ExtBalType": "LastYrInt", "CurAmt": { "Amt": "0.00", "CurCode": "THB" }, "EffDt": "2020-01-06T15:18:28.849000+07:00" }, { "ExtBalType": "Orig", "CurAmt": { "Amt": "0.00", "CurCode": "THB" }, "EffDt": "2020-01-06T15:18:28.849000+07:00" }, { "ExtBalType": "Unpaid/AccruedInt", "CurAmt": { "Amt": "0.00", "CurCode": "THB" }, "EffDt": "2020-01-06T15:18:28.849000+07:00" }, { "ExtBalType": "YTDInterestAccrEC", "CurAmt": { "Amt": "0.00", "CurCode": "THB" }, "EffDt": "2020-01-06T15:18:28.849000+07:00" }, { "ExtBalType": "TotalPastDue", "CurAmt": { "Amt": "1126125.00", "CurCode": "THB" }, "EffDt": "2020-01-06T15:18:28.849000+07:00" } ], "BankAcctRec": { "LoanAcctId": { "AcctId": "", "AcctType": "", "BankInfo": "" }, "BankAcctInfo": { "CurCode": "", "PersonName": { "LastName": "", "FirstName": "", "LegalName": "" }, "ContactInfo": "", "ProductId": "S700" } }, "LOCAcctRec": { "LoanInfoCommon": { "AccountTitle": "MR.NAME00000006878141 LAST00000006878141", "RemainingPmtCount": "0", "RemainingPmtTerm": "1", "RegPmtCurAmt": { "Amt": "0.00", "CurCode": "THB" }, "LastPmtCurAmt": { "Amt": "0.00", "CurCode": "THB" }, "PastDuePmtCount": "1", "PastDueDt": "2011-12-28", "NextPmtDt": "9999-12-31", "NextPmtCurAmt": { "Amt": "0.00", "CurCode": "THB" }, "DaysPastDue": "2927", "CurrentIntRate": { "Rate": "0.0000001" }, "OriginalIntRate": { "Rate": "0.0000001" }, "RateType": "F", "EffDt": "2011-12-27T12:00:00.000000-00:00", "MatDt": "2011-12-28", "LOCLimit": { "Amt": "1126125.00", "CurCode": "THB" }, "LateChargesCurAmt": { "Amt": "0.00", "CurCode": "THB" }, "CollateralInfo": { "CollateralCode": "000" }, "SeqNum": "0", "DebitAcct": "", "CurrentPmtCount": "0", "FeesDueCurAmt": { "Amt": "0.00", "CurCode": "THB" }, "PerDiemCurAmt": { "Amt": "0.0000000", "CurCode": "THB" }, "PastDuePmtCounter": { "Type": "6-LifeTime", "DelinquencyCategory": "151", "PastDuePmtCount": "1" }, "DraftAcctInfo": { "AcctId": "", "USA.RTN": "0" }, "ProcessDt": "2020-01-02", "CustType": "Personal", "AutoDebitMethod": "", "OrigMatureDt": "2011-12-28", "AccruedIntAmt1": { "Amt": "0.00", "CurCode": "THB" }, "AccruedIntAmt2": { "Amt": "0.00", "CurCode": "THB" }, "AccruedIntAmt3": { "Amt": "0.00", "CurCode": "THB" }, "TotalInt": { "Amt": "0.00", "CurCode": "THB" }, "NextPmtPrincipal": { "Amt": "0.00" }, "NextPmtInterest": { "Amt": "0.00" }, "AcctBal": { "BalType": "ToAccountBal", "CurAmt": { "Amt": "0.00" } }, "LastTrnDt": "2011-12-28", "LastCalculatedInterestDt": "9999-12-31", "ContractDt": "2011-12-27", "TransactionCount": "N" } }, "BankAcctStatus": { "BankAcctStatusCode": "Active" }, "Language": "", "Region": "", "AuthOfficer": "18176", "PersonInfo": [ { "NameAddrType": "", "FullName": "MR.NAME00000006878141 LAST00000006878141", "ContactInfo": { "PostAddr": { "Addr1": "ที่อยู่บรรทัด100000006878141", "Addr2": "ที่อยู่บรรทัด200000006878141", "City": "จ.ทดสอบ", "StateProv": "  ", "PostalCode": "1234567890", "Country": "US", "AddrType": "Mailing" } }, "TINInfo": { "TINType": "SSN", "TaxId": "", "CertCode": "Certification Not on File" }, "OEDCode": "All Other Individuals", "OEDInstitution": "All Other Individuals" }, { "NameAddrType": "", "FullName": "", "ContactInfo": { "PhoneNum": { "PhoneType": "Business", "Phone": "000-00006878" } } } ], "InsuranceInfo": { "InsRebateDueCurAmt": { "Amt": "0.00" } }, "PartyAcctRel": "" }, "Status": { "StatusCode": "200", "StatusDesc": "success" } }, "GetLoanAccountDetailResponse": { "Result": { "Status": "SUCCESS", "Message": "" } }, "Status": { "StatusCode": "200", "StatusDesc": "success" } }';
        }
    }

    public static String getResponseOSC04InnerEmpty {
        get {
            return '{ "GetLoanAccountResponse": {},"Status": { "StatusCode": "444", "StatusDesc": "testError" }}';
        }
    }

    public static String getResponseOSC06Hi {
        get {
            return '{ "GetInvestmentAccountResponse": { "listFundClass": { "FundClass": { "FundClassCode": "800", "FundClassNameEN": "Long-term Equity Fund", "FundClassNameTH": "กองทุนรวมหุ้นระยะยาว", "listFundHouse": { "FundHouse": { "FundHouseCode": "UOBAMTH", "listFundCode": [ { "FundCode": { "UnitHolderNo": "PTXXXXXXXXXX", "FundCode": "CGLTF", "FundNameTH": "3", "FundNameEN": "Good Corporate Governance Long Term Equity Fund", "FundNickNameTH": "บรรษัทภิบาล LTF", "FundNickNameEN": "Good Corp Gov LTF", "FundShortName": "CG-LTF", "UnrealizedProfit": "3145.45", "MarketValue": "16045.45" } } ] } } } }, "percOfFundType": { "Balanced": "0", "ForeignEquity": "1", "ForeignFixedIncome": "0", "LocalEquity": "0", "LocalFixedIncome": "0", "Others": "1" }, "GetFundDetails": [ { "OrderToBeProcess": null, "detailFund": { "DateAsOf": "18/12/2019", "Unit": "275.2353", "Nav": "56.176", "Cost": "12900", "InvestmentValue": "15461.62", "UnrealizedProfit": "2561.62", "UnrealizedProfitPerc": "19.86", "TaxDoc": "N", "UnitLTF5Y": "275.2353", "FundHouseCode": "UOBAMTH", "UnitHolderNo": "PTXXXXXXXXXX", "FundNameTH": "CG-LTF", "FundNameEN": "Good Corporate Governance Long Term Equity Fund" } } ], "Status": { "StatusCode": "200", "StatusDesc": "success" } }, "Status": { "StatusCode": "200", "StatusDesc": "success" } }';
        }
    }

    public static String getResponseOSC06HiCatch {
        get {
            return '{ "GetInvestmentAccountResponse": { "listFundClass": { "FundClass": { "FundClassCode": "800", "FundClassNameEN": "Long-term Equity Fund", "FundClassNameTH": "กองทุนรวมหุ้นระยะยาว", "listFundHouse": { "FundHouse": { "FundHouseCode": "UOBAMTH", "listFundCode": [ { "FundCode": { "UnitHolderNo": "PTXXXXXXXXXX", "FundCode": "CGLTF", "FundNameTH": "3", "FundNameEN": "Good Corporate Governance Long Term Equity Fund", "FundNickNameTH": "บรรษัทภิบาล LTF", "FundNickNameEN": "Good Corp Gov LTF", "FundShortName": "CG-LTF", "UnrealizedProfit": "3145.45", "MarketValue": "16045.45" } } ] } } } }, "percOfFundType": { "Balanced": "0", "ForeignEquity": "1", "ForeignFixedIncome": "0", "LocalEquity": "0", "LocalFixedIncome": "0", "Others": "1" }, "GetFundDetails": {}, "Status": { "StatusCode": "200", "StatusDesc": "success" } }, "Status": { "StatusCode": "200", "StatusDesc": "success" } }';
        }
    }

    public static String getResponseOSC06Low {
        get {
            return '{ "GetInvestmentAccountDetailResponse": { "Result": { "Status": "SUCCESS", "Message": "", "InvestmentInformation": { "Status": "SUCCESS", "Message": "", "NumberOfUnit": "275.2353", "CostOfInvestment": "12900", "MarketValue": "15461.62", "UnrealizedGL": "2561.62", "NAVUnit": "56.176", "AipInstruction": "No" }, "InvestmentTransaction": { "Status": "SUCCESS", "Message": "" }, "AutoInvestmentPlan": { "Status": "SUCCESS", "Message": "" } } }, "Status": { "StatusCode": "200", "StatusDesc": "success" } }';
        }
    }

    public static String getResponseOSC06LowCatch {
        get {
            return '{}';
        }
    }

    public static String getResponseOSC05 {
        get {
            return '{ "GetBancassuranceAccountResponse": { "Result":{} }, "Status": { "StatusCode": "200", "StatusDesc": "success" } }';
        }
    }
    public static String getResponseOSC05Detail {
        get {
            return '{ "GetBancassuranceAccountDetailResponse": { "Result": { "Status": "SUCCESS", "Message": "", "BancassuranceInformation": { "Status": "SUCCESS", "Message": "", "ProductType": "NON LIFE INSURANCE", "TMBProductCode": "PA02", "ProductName": "Accident Care 100% Extra Sure", "EffectiveDate": "2015-04-26+07:00", "PolicyStatus": "Active", "PolicyNo": "001D/PP00-15-044984", "SumInsured": "500000", "AFYP": "1403", "ExpiryDate": "2020-04-26+07:00", "Sales": "19521" }, "BancassuranceDetails": { "Status": "SUCCESS", "Message": "", "InsuranceCompany": "Thai Insurance" }, "PaymentInformation": { "Status": "SUCCESS", "Message": "", "PaymentMode": "Single", "PremiumAmount": "1403", "PaymentMethod": "Cash", "TotalPremiumPaid": "1403", "YearOfPayment": "1 of 1", "NumberOfTimePremiumPaid": "1", "LastPaymentDate": "2015-04-24+07:00" }, "NextCashBackInformation": { "Status": "SUCCESS", "Message": "", "Amount": "0" }, "InsuredPropertyAsset": { "Status": "SUCCESS", "Message": "", "Address": ", , , , " }, "InsuredAutomobileAsset": { "Status": "SUCCESS", "Message": "", "Brand": "", "YearOfManufactured": "", "Model": "", "PlateNumber": "" }, "BeneficiaryInformation": { "Status": "SUCCESS", "Message": "", "Beneficiary": { "Name": "จงกล", "Relationship": "บิดา" } }, "InsuranceClaimRecord": { "Status": "SUCCESS", "Message": "" } } }, "Status": { "StatusCode": "200", "StatusDesc": "success" } }';
        }
    }

    public static String getResponseCallBackGuarantor {
        get {
            return '{"status":{"code":"0000","description":"Success"},"guarantors":[{"c_name":"hhhh","id_no":"4552466","id_birth_date":"24/12/1997"},{"c_name":"iiiiii","id_no":"6432857","id_birth_date":"14/2/1999"},{"c_name":"pppp","id_no":"4552466","id_birth_date":"24/12/1997"},{"c_name":"nnnnn","id_no":"4552466","id_birth_date":"24/12/1997"}]}';
        }
    }

    private class OSC01API implements HttpCalloutMock {
        public HTTPResponse respond(HTTPRequest req) {
            HTTPResponse res = new HTTPResponse();
            res.setBody(getResponseOSC01);
            res.setStatusCode(200);
            return res;
        }
    }

    private class OSC02API implements HttpCalloutMock {
        public HTTPResponse respond(HTTPRequest req) {
            HTTPResponse res = new HTTPResponse();
            res.setBody(getResponseOSC02);
            res.setStatusCode(200);
            return res;
        }
    }

    private class OSC02APIInnerEmpty implements HttpCalloutMock {
        public HTTPResponse respond(HTTPRequest req) {
            HTTPResponse res = new HTTPResponse();
            res.setBody(getResponseOSC02InnerEmpty);
            res.setStatusCode(200);
            return res;
        }
    }

    private class OSC02APIEmpty implements HttpCalloutMock {
        public HTTPResponse respond(HTTPRequest req) {
            HTTPResponse res = new HTTPResponse();
            res.setBody('');
            res.setStatusCode(200);
            return res;
        }
    }

    private class OSC04API implements HttpCalloutMock {
        public HTTPResponse respond(HTTPRequest req) {
            HTTPResponse res = new HTTPResponse();
            res.setBody(getResponseOSC04);
            res.setStatusCode(200);
            return res;
        }
    }

    private class OSC04APIInnerEmpty implements HttpCalloutMock {
        public HTTPResponse respond(HTTPRequest req) {
            HTTPResponse res = new HTTPResponse();
            res.setBody(getResponseOSC04InnerEmpty);
            res.setStatusCode(200);
            return res;
        }
    }

    private class OSC04APIEmpty implements HttpCalloutMock {
        public HTTPResponse respond(HTTPRequest req) {
            HTTPResponse res = new HTTPResponse();
            res.setBody('');
            res.setStatusCode(200);
            return res;
        }
    }

    private class InvestmentAPIHigh implements HttpCalloutMock {
        public HTTPResponse respond(HTTPRequest req) {
            HTTPResponse res = new HTTPResponse();
            res.setBody(getResponseOSC06Hi);
            res.setStatusCode(200);
            return res;
        }
    }

    private class InvestmentAPIHighCatch implements HttpCalloutMock {
        public HTTPResponse respond(HTTPRequest req) {
            HTTPResponse res = new HTTPResponse();
            res.setBody(getResponseOSC06HiCatch);
            res.setStatusCode(200);
            return res;
        }
    }

    private class InvestmentAPILow implements HttpCalloutMock {
        public HTTPResponse respond(HTTPRequest req) {
            HTTPResponse res = new HTTPResponse();
            res.setBody(getResponseOSC06Low);
            res.setStatusCode(200);
            return res;
        }
    }

    private class BancAssuranceHigh implements HttpCalloutMock {
        public HTTPResponse respond(HTTPRequest req) {
            HTTPResponse res = new HTTPResponse();
            res.setBody(getResponseOSC05);
            res.setStatusCode(200);
            return res;
        }
    }

    private class BancAssuranceLow implements HttpCalloutMock {
        public HTTPResponse respond(HTTPRequest req) {
            HTTPResponse res = new HTTPResponse();
            res.setBody(getResponseOSC05Detail);
            res.setStatusCode(200);
            return res;
        }
    }

    private class AutoloanListAPI implements HttpCalloutMock {
        public HTTPResponse respond(HTTPRequest req) {
            HTTPResponse res = new HTTPResponse();
            res.setBody('{"isError":false,"Output":[{"ContractNo":"256203974","ContractStatusCode":"92","ContractStatusName":"ปิดสัญญาล่วงหน้า","HPTotalAmount":"350016.00","HPNetAmount":"327117.60","OutstandingAmount":"0.00","Installment":"7292.00","NumberOfInstallmentBalance":"0","TotalInstallments":"48","CurrentOfInstallments":"48","OverdueNo":"0","OverdueAmount":"0.00","Channel":"งามวงศ์วาน"},{"ContractNo":"236300013","ContractStatusCode":"21","ContractStatusName":"บอกเลิก","HPTotalAmount":"754640.00","HPNetAmount":"705271.12","OutstandingAmount":"440200.00","Installment":"15722.00","NumberOfInstallmentBalance":"28","TotalInstallments":"48","CurrentOfInstallments":"20","OverdueNo":"15","OverdueAmount":"235830.00","Channel":"รัชดา"}],"RES":{"RESPONSECODE":"HP001","RESPONSEMESSAGE":"Successful response"},"HTTPStatusCode":200}');
            res.setStatusCode(200);
            return res;
        }
    }

    private class AutoLoanDetailAPI implements HttpCalloutMock {
        public HTTPResponse respond(HTTPRequest req) {
            HTTPResponse res = new HTTPResponse();
            res.setBody('{"isError":false,"Output":[{"ContractNo":"252016203974","CustomerCode":"1844976","ContractDate10":"28/02/2562","DealerName":"บจก. 107993 ชื่อผูเ้ช่าซื้อ 107993 นามสกุล","CarpriceAmt":"605000.00","HPTotalAmount":"350016.00","InstallmentAmount":"7292.00","InterestedRate":".00","TotalInstallments":"48","CurrentOfInstallments":"48","NumberOfInstallmentBalance":"0","CarBrandName":"MAZDA","CarModel":"2","CarColorName":"แดง","ProductCarType":"รถใหม่","FinancialAmount":"350000.00","OverdueAmount":"0.77","PenaltyAmount":"0.00","OverdueNo":"0","HubOwnerName":"งามวงศ์วาน","ProductCode":"NEW","LastDueDate":"10/03/2566","MarketingOfficerName":"น.ส. 3867038 ชื่อผูเ้ช่าซื้อ 3867038 นามสกุล","CarDownAmt":"255000.00","DueDay":"10","PaymentMethodDesc":"2 :Auto Debit","FirstInstallmentDate10":"10/04/2562","OutstandingAmount":"0.00","ContractStatusCode":"92","ContractStatusName":"ปิดสัญญาล่วงหน้า","CarYear":"2019","CarTypeDesc":"เก๋ง 2 ตอน","CarRegno":"8กส745","CarRegProv":"กรุงเทพ ฯ","CarChasis":"MM8DJ2H3A0W428926","CarEngno":"P350338083","CarEngineSize":"1299","GuarantorName1":"","GuarantorBD1":"","GuarantorIDNo1":"","GuarantorName2":"","GuarantorBD2":"","GuarantorIDNo2":"","GuarantorName3":"","GuarantorBD3":"","GuarantorIDNo3":"","GuarantorName4":"","GuarantorBD4":"","GuarantorIDNo4":""}],"RES":{"RESPONSECODE":"HP001","RESPONSEMESSAGE":"Successful response"},"HTTPStatusCode":200}');
            res.setStatusCode(200);
            return res;
        }
    }

    private class GuarantorAPI implements HttpCalloutMock {
        public HTTPResponse respond(HTTPRequest req) {
            HTTPResponse res = new HTTPResponse();
            res.setBody('{"isError":false,"Output":[{"ContractNo":"252016203974","CustomerCode":"1844976","ContractDate10":"28/02/2562","DealerName":"บจก. 107993 ชื่อผูเ้ช่าซื้อ 107993 นามสกุล","CarpriceAmt":"605000.00","HPTotalAmount":"350016.00","InstallmentAmount":"7292.00","InterestedRate":".00","TotalInstallments":"48","CurrentOfInstallments":"48","NumberOfInstallmentBalance":"0","CarBrandName":"MAZDA","CarModel":"2","CarColorName":"แดง","ProductCarType":"รถใหม่","FinancialAmount":"350000.00","OverdueAmount":"0.77","PenaltyAmount":"0.00","OverdueNo":"0","HubOwnerName":"งามวงศ์วาน","ProductCode":"NEW","LastDueDate":"10/03/2566","MarketingOfficerName":"น.ส. 3867038 ชื่อผูเ้ช่าซื้อ 3867038 นามสกุล","CarDownAmt":"255000.00","DueDay":"10","PaymentMethodDesc":"2 :Auto Debit","FirstInstallmentDate10":"10/04/2562","OutstandingAmount":"0.00","ContractStatusCode":"92","ContractStatusName":"ปิดสัญญาล่วงหน้า","CarYear":"2019","CarTypeDesc":"เก๋ง 2 ตอน","CarRegno":"8กส745","CarRegProv":"กรุงเทพ ฯ","CarChasis":"MM8DJ2H3A0W428926","CarEngno":"P350338083","CarEngineSize":"1299","GuarantorName1":"","GuarantorBD1":"","GuarantorIDNo1":"","GuarantorName2":"","GuarantorBD2":"","GuarantorIDNo2":"","GuarantorName3":"","GuarantorBD3":"","GuarantorIDNo3":"","GuarantorName4":"","GuarantorBD4":"","GuarantorIDNo4":""}],"RES":{"RESPONSECODE":"HP001","RESPONSEMESSAGE":"Successful response"},"HTTPStatusCode":200}');
            res.setStatusCode(200);
            return res;
        }
    }

    private class GuarantorAPICatch implements HttpCalloutMock {
        public HTTPResponse respond(HTTPRequest req) {
            HTTPResponse res = new HTTPResponse();
            res.setBody('{"isError":false,"Output":');
            res.setStatusCode(200);
            return res;
        }
    }

    private class GuarantorAPIError implements HttpCalloutMock {
        public HTTPResponse respond(HTTPRequest req) {
            HTTPResponse res = new HTTPResponse();
            res.setBody('');
            res.setStatusCode(200);
            return res;
        }
    }

    private class GuarantorAPIEmpty implements HttpCalloutMock {
        public HTTPResponse respond(HTTPRequest req) {
            HTTPResponse res = new HTTPResponse();
            res.setBody('{}');
            res.setStatusCode(200);
            return res;
        }
    }

    private class CYBAPI implements HttpCalloutMock {
        public HTTPResponse respond(HTTPRequest req) {
            HTTPResponse res = new HTTPResponse();
            res.setBody('{"errors":[{"namespace":"DWH","message":"ORA-00942: table or view does not exist (java.sql.SQLSyntaxErrorException).","code":"5000"}],"status":{"code":"0000","description":"Success"},"loan_account":{"account_no":"0195490032901","account_type":"LOC","info":{"account_title":"MR.NAME00000000000001 LAST00000000000001","customer_type":"Personal"},"payment_info":{"last_payment_date":null,"past_due_date":"2020-03-31","next_due_date":"2020-05-31","next_payment_principal_amount":10100,"next_payment_interest_amount":0,"next_payment_date":"2020-05-31","past_due_payment_count":2,"total_past_due_amount":20100,"current_loan_amount":10000,"last_payment_amount":0,"next_payment_amount":10100,"late_charges_amount":7569.86,"fee_due_amount":200,"interest":{"current_rate":"6.2500000","original_rate":"0.0000001"}},"balance_info":{"balances":{"account_limit":{"amount":1000000,"currency":"THB"},"principal":{"amount":1000000,"currency":"THB"},"outstanding":{"amount":1000000,"currency":"THB"},"unpaid_accrued_interest":{"amount":11910.95,"currency":"THB"},"current_commitment":{"amount":1000000,"currency":"THB"}},"od":{"od_limit_amount":0}},"personal_info":{"full_name":"MR.NAME00000000000001 LAST00000000000001","contact_info":{"address1":"ที่อยู่บรรทัด100000000000001","address2":"ที่อยู่บรรทัด200000000000001","address3":"","city":"จ.ทดสอบ","postal_code":"1234567890","country":"US","address_type":"Mailing"}}}}');
            res.setStatusCode(200);
            return res;
        }
    }

    private class CYBAPICatch implements HttpCalloutMock {
        public HTTPResponse respond(HTTPRequest req) {
            HTTPResponse res = new HTTPResponse();
            res.setBody('{"errors":[{"namespace":');
            res.setStatusCode(200);
            return res;
        }
    }

    private class CYBAPIError implements HttpCalloutMock {
        public HTTPResponse respond(HTTPRequest req) {
            HTTPResponse res = new HTTPResponse();
            res.setBody('');
            res.setStatusCode(200);
            return res;
        }
    }

    private class CYBAPIEmpty implements HttpCalloutMock {
        public HTTPResponse respond(HTTPRequest req) {
            HTTPResponse res = new HTTPResponse();
            res.setBody('{}');
            res.setStatusCode(200);
            return res;
        }
    }

    private class CardBalanceAPI implements HttpCalloutMock {
        public HTTPResponse respond(HTTPRequest req) {
            HTTPResponse res = new HTTPResponse();
            res.setBody(getResponseSCS_get_cards_balances);
            res.setStatusCode(200);
            return res;
        }
    }

    @isTest static void testCallOSC01(){
        Test.setMock(HttpCalloutMock.class, new OSC01API());
        Object returnMap = RTL_ProductHoldingWebSvcUtils.callOSC01('00000051187', '0011000102470000', '001100000000000000000000051187');
    }

    @isTest static void testCallbackOSC02(){
        Test.setMock(HttpCalloutMock.class, new OSC02API());
        Object returnMap = RTL_ProductHoldingWebSvcUtils.callbackOSC02('2471779484', '', 'com.fnis.xes.IM', '00000051187', '0011000102470000', '001100000000000000000000051187');
    }

    @isTest static void testCallbackOSC02Empty(){
        Test.setMock(HttpCalloutMock.class, new OSC02APIEmpty());
        Object returnMap = RTL_ProductHoldingWebSvcUtils.callbackOSC02('2471779484', '', 'com.fnis.xes.IM', '00000051187', '0011000102470000', '001100000000000000000000051187');
    }

    @isTest static void testCallbackOSC02InnerEmpty(){
        Test.setMock(HttpCalloutMock.class, new OSC02APIInnerEmpty());
        Object returnMap = RTL_ProductHoldingWebSvcUtils.callbackOSC02('2471779484', '', 'com.fnis.xes.IM', '00000051187', '0011000102470000', '001100000000000000000000051187');
    }

    @isTest static void testCallbackOSC04(){
        Test.setMock(HttpCalloutMock.class, new OSC04API());
        Object returnMap = RTL_ProductHoldingWebSvcUtils.callbackOSC04('00015405889701', '', '000000000000051187', '0011000102470000', '001100000000000000000000051187');
    }

    @isTest static void testCallbackOSC04Empty(){
        Test.setMock(HttpCalloutMock.class, new OSC04APIEmpty());
        Object returnMap = RTL_ProductHoldingWebSvcUtils.callbackOSC04('00015405889701', '', '000000000000051187', '0011000102470000', '001100000000000000000000051187');
    }

    @isTest static void testCallbackOSC04InnerEmpty(){
        Test.setMock(HttpCalloutMock.class, new OSC04APIInnerEmpty());
        Object returnMap = RTL_ProductHoldingWebSvcUtils.callbackOSC04('00015405889701', '', '000000000000051187', '0011000102470000', '001100000000000000000000051187');
    }

    @isTest static void testCallOSC05(){
        Test.setMock(HttpCalloutMock.class, new BancAssuranceHigh());
        Object returnMap = RTL_ProductHoldingWebSvcUtils.callOSC05('00000051187', '001100000000000000000000051187');
    }

    @isTest static void testCallOSC05Detail(){
        String body = '{"GetBancassuranceAccountDetailRequest":{"RMID":"1150","PolicyNumber":"T00004644"}}';
        Test.setMock(HttpCalloutMock.class, new BancAssuranceLow());
        Object returnMap = RTL_ProductHoldingWebSvcUtils.callOSC05Detail(body, '001100000000000000000000051187');
    }

    @isTest static void testCalloutOSC06List(){
        Test.setMock(HttpCalloutMock.class, new InvestmentAPIHigh());
        Object returnMap = RTL_ProductHoldingWebSvcUtils.calloutOSC06List('PT100000000000050089', '001100000000000000000000051187');
    }

    @isTest static void testCalloutOSC06ListCatch(){
        Test.setMock(HttpCalloutMock.class, new InvestmentAPIHighCatch());
        Object returnMap = RTL_ProductHoldingWebSvcUtils.calloutOSC06List('PT100000000000050089', '001100000000000000000000051187');
    }

    @isTest static void testCalloutOSC06Detail(){
        Test.setMock(HttpCalloutMock.class, new InvestmentAPILow());
        Object returnMap = RTL_ProductHoldingWebSvcUtils.calloutOSC06Detail('PT100000000000050089', 'CGLTF', '001100000000000000000000051187');
    }

    @isTest static void testCalloutAutoLoan_HpFleetHpList(){
        Test.setMock(HttpCalloutMock.class, new AutoloanListAPI());
        Map<String, Object> jsonMap = (Map<String, Object>)JSON.deserializeUntyped('{"service":"CoreHP","recordId":"001p0000010nWtu","tmbCustId":"001100000000000000000001601819"}');
        Object returnMap = RTL_ProductHoldingWebSvcUtils.calloutAutoLoan_HpFleetHpList('TBANK', '000000000001601819', 'HP', '20230103', '03300854', '001p0000010nXLSAA2', (Object) jsonMap);
    }

    @isTest static void testCalloutAutoLoan_HpFeetHpDetail(){
        Test.setMock(HttpCalloutMock.class, new AutoLoanDetailAPI());
        String body = '{"Company":"TBANK","ContractNo":"252016203974","TranDate":"' + '20221129' + '","TranTime":"' + '03134487' + '"}';
        Object returnMap = RTL_ProductHoldingWebSvcUtils.calloutAutoLoan_HpFeetHpDetail(body, '001100000000000000000001601819');
    }

    @isTest static void testCallbackGuarantor(){
        Test.setMock(HttpCalloutMock.class, new GuarantorAPI());
        Object returnMap = RTL_ProductHoldingWebSvcUtils.callbackGuarantor('00015405889701', '000000000000051187', '001100000000000000000000051187');
    }

    @isTest static void testCallbackGuarantorCatch(){
        Test.setMock(HttpCalloutMock.class, new GuarantorAPICatch());
        Object returnMap = RTL_ProductHoldingWebSvcUtils.callbackGuarantor('00015405889701', '000000000000051187', '001100000000000000000000051187');
    }

    @isTest static void testCallbackGuarantorError(){
        Test.setMock(HttpCalloutMock.class, new GuarantorAPIError());
        Object returnMap = RTL_ProductHoldingWebSvcUtils.callbackGuarantor('00015405889701', '000000000000051187', '001100000000000000000000051187');
    }

    @isTest static void testCallbackGuarantorEmpty(){
        Test.setMock(HttpCalloutMock.class, new GuarantorAPIEmpty());
        Object returnMap = RTL_ProductHoldingWebSvcUtils.callbackGuarantor('00015405889701', '000000000000051187', '001100000000000000000000051187');
    }

    @isTest static void testCalloutCYBDetail(){
        Test.setMock(HttpCalloutMock.class, new CYBAPI());
        Object returnMap = RTL_ProductHoldingWebSvcUtils.calloutCYBDetail('00015405889701', '000000000000051187', '001100000000000000000000051187');
    }

    @isTest static void testCalloutCYBDetailCatch(){
        Test.setMock(HttpCalloutMock.class, new CYBAPICatch());
        Object returnMap = RTL_ProductHoldingWebSvcUtils.calloutCYBDetail('00015405889701', '000000000000051187', '001100000000000000000000051187');
    }

    @isTest static void testCalloutCYBDetailError(){
        Test.setMock(HttpCalloutMock.class, new CYBAPIError());
        Object returnMap = RTL_ProductHoldingWebSvcUtils.calloutCYBDetail('00015405889701', '000000000000051187', '001100000000000000000000051187');
    }

    @isTest static void testCalloutCYBDetailEmpty(){
        Test.setMock(HttpCalloutMock.class, new CYBAPIEmpty());
        Object returnMap = RTL_ProductHoldingWebSvcUtils.calloutCYBDetail('00015405889701', '000000000000051187', '001100000000000000000000051187');
    }

    @isTest static void testCallOSC03(){
        Test.setMock(HttpCalloutMock.class, new CardBalanceAPI());
        Object returnMap = RTL_ProductHoldingWebSvcUtils.callOSC03('000000000000051187', 'N', '', '', '001100000000000000000000051187');
    }

    @isTest static void testGetAccessibleCusHold(){
        Object returnMap = RTL_ProductHoldingWebSvcUtils.getAccessibleCusHold('001p0000010nXLSAA2');
    }
}